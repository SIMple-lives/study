module uart_trans( 
     clk,
   rst_n,
   judge,
   uart_tx,
   stop
    );
    
     input clk;   
     input rst_n; 
     input judge;
     output uart_tx;
     output reg stop;
    reg send_go;
    wire tx_done;
    reg [3:0] state;
    reg [7:0] data;
 
   
     uart_send uart_send(
    .clk       (clk),
    .rst_n     (rst_n),
    .data      (data),
    .send_go   (send_go),
    .baud_set  (0),
    .uart_tx   (uart_tx),
    .tx_done   (tx_done)
    );
    reg [7:0] c="2";
    reg [7:0] d="3";
    reg [7:0] e="0"; 
    reg [7:0] f="5";
    reg [7:0] g="6";
    reg [7:0] h="4";

    always@(posedge clk or negedge rst_n)
       if(!rst_n)begin
          state<=0;
          send_go<=0;
          data<=0;
         
       end
       else begin
          case(state)
             0:if(judge)begin
                 state<=1;
                 send_go<=1;
                 data<=c;
               end
               else begin
                 state<=0;  
                 send_go<=0;
               end
             1:if(tx_done)begin   
                 state<=2;      
                 send_go<=1;    
                 data<=d;  
               end              
               else begin       
                 state<=1;      
                 send_go<=0;    
               end              
             2:if(tx_done)begin  
                 state<=3;       
                 send_go<=1;     
                 data<=e;   
               end               
               else begin        
                 state<=2;       
                 send_go<=0;     
               end               
             3:if(tx_done)begin  
                 state<=4;       
                 send_go<=1;     
                 data<=f;   
               end               
               else begin        
                 state<=3;       
                 send_go<=0;     
               end               
             4:if(tx_done)begin  
                 state<=5;
                   send_go<=1;     
                 data<=g;   
               end               
               else begin        
                 state<=4;       
                 send_go<=0;     
               end               
             5:if(tx_done)begin   
                 state<=6;        
                 send_go<=1;      
                 data<=e;    
               end                
               else begin         
                 state<=5;        
                 send_go<=0;      
               end                
             6:if(tx_done)begin  
                 state<=7;       
                 send_go<=1;     
                 data<=h;   
               end               
               else begin        
                 state<=6;       
                 send_go<=0;     
               end               
             7:if(tx_done)begin   
                 state<=8;        
                 send_go<=1;      
                 data<=e;    
               end                
               else begin         
                 state<=7;        
                 send_go<=0;      
               end                
             8:if(tx_done)begin
                 send_go<=0;
                 state<=0;
                 data<=0;
               end
               else begin
                 state<=8;
                 send_go<=0;
               end    
             default:state<=0;
          endcase
       end
              
 always@(posedge clk or negedge rst_n)
    if(!rst_n)
        stop<=0;
    else if(state==0)
        stop<=0;
    else if(state==7)
        stop<=1;
                 

 
     
    
    
endmodule
